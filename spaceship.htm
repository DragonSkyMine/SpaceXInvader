<!DOCTYPE html>
<html>
<head>
  <title>SpaceShip</title>
  <meta http-equiv="content-type" content="text/html; charset=windows-1252">
  <link rel="stylesheet" href="style.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script type="text/javascript" src="gl-matrix.js"></script>
  <script type="text/javascript" src="webgl-utils.js"></script>
  <script type="text/javascript" src="game-utils.js"></script>
  <script type="text/javascript" src="fbo.js"></script>
  <script type="text/javascript" src="heightfield.js"></script>
  <script type="text/javascript" src="background.js"></script>
  <script type="text/javascript" src="spaceship.js"></script>
  <script type="text/javascript" src="missile.js"></script>
  <script type="text/javascript" src="ennemi.js"></script>
  <script type="text/javascript" src="weather.js"></script>
  <script type="text/javascript" src="bonus.js"></script>

  <script id="heightfield-vs" type="x-shader/x-vertex">
  // *** le vertex shader ***
  attribute vec3 aVertexPosition; // la position du sommet
  attribute vec2 aVertexCoord; // sa coordonnee de texture

  varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

  void main(void) {
    // projection de la position
    gl_Position = vec4(aVertexPosition, 1.0);

    // stockage de la coordonnee de texture
    vTextureCoord = aVertexCoord;
  }
</script>

<script id="heightfield-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

uniform vec2 uOffset;
uniform float uAmplitude; // amplitude du bruit
uniform float uFrequency; // frequence du bruit
uniform float uPersistence; // persistence du bruit

varying vec2 vTextureCoord; // recuperation de la coord rasterisee

float hash(vec2 p) {
  // pseudo random fonction
  float h = dot(mod(p,vec2(100.0)),vec2(127.1,311.7));
  return -1.0 + 2.0*fract(sin(h)*43758.5453123);
}

float vnoise(in vec2 p) {
    // genere une valeur random sur une position sp�cifique d'une grille
    // pris sur shadertoy
    vec2 i = floor(p);
    vec2 f = fract(p);

  vec2 u = f*f*(3.0-2.0*f);

  return mix( mix( hash( i + vec2(0.0,0.0) ),
  hash( i + vec2(1.0,0.0) ), u.x),
  mix( hash( i + vec2(0.0,1.0) ),
  hash( i + vec2(1.0,1.0) ), u.x), u.y);
}

float fractalNoise(in vec2 p) {
  const int nb = 7; // nb octave
  float f = uFrequency; // frequency
  float a = uAmplitude; // amplitude
  float e = uPersistence; // persistence

  float n = 0.0;
  for(int i=0;i<nb;++i) {
    n = n + a*vnoise(p*f);
    f = 2.5*f;
    a = a*e;
  }
  return n;
}

void main(void) {
  vec2 p = vTextureCoord*2.0-vec2(1.0); // coordonnees
  float n = fractalNoise(p+uOffset)*0.5+0.5; // bruit

  gl_FragColor = vec4(vec3(n),1.0);

}
</script>

<script id="background-vs" type="x-shader/x-vertex">
// *** le vertex shader ***
attribute vec3 aVertexPosition; // la position du sommet
attribute vec2 aVertexCoord; // sa coordonnee de texture

varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

void main(void) {
  // projection de la position
  gl_Position = vec4(aVertexPosition, 1.0);

  // stockage de la coordonnee de texture
  vTextureCoord = aVertexCoord;
}
</script>

<script id="background-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

uniform float uTime; // temps actuel
uniform sampler2D uHeightfield; // la texture de hauteurs
uniform vec2 uTextureSize; // la taille de la texture
varying vec2 vTextureCoord; // recuperation de la coord rasterisee

vec3 shade(in vec3 n,in float d) {
    vec2 xy = vTextureCoord.xy*2.0-vec2(1.0);
    vec3 v = -normalize(vec3(xy.x,xy.y,1.0)); // vecteur vue
    vec3 l = normalize(vec3(-3.0, 0.5, 10.0)); // vecteur lumière (pourrait varier au cours du temps pour de meilleurs effets)

    // TODO : le shading !
    // la fonction prend en entrée la normale du terrain et sa profondeur
    float contrast =  max(0.0, 0.25 - (uTime * 0.25));
    vec3 r = reflect(l, n);
    vec3 couleur = vec3(0.1, 0.08, 0.05);
    vec3 diffuse = vec3(0.7, 0.3, 0.1) + (d * contrast);
    vec3 gloss = vec3(0.1, 0.0, 0.0);

    vec3 kdnl = diffuse * max(dot(n, l), 0.0);
    vec3 ksvr = gloss * pow(max(dot(v, r), 0.0), 1.0);


    // la couleur est attribuee au fragment courant
    n = (couleur + kdnl + ksvr) - uTime;

    return n;
}

vec3 computeNormal() {
  const float scale = 25.0;

  vec2 ps = 1.0/uTextureSize;
  float xp = texture2D(uHeightfield,vTextureCoord+vec2( ps.x,0.0)).x;
  float xm = texture2D(uHeightfield,vTextureCoord+vec2(-ps.x,0.0)).x;
  float yp = texture2D(uHeightfield,vTextureCoord+vec2(0.0, ps.y)).x;
  float ym = texture2D(uHeightfield,vTextureCoord+vec2(0.0,-ps.y)).x;

  float gx = 0.5*(xp-xm)*scale;
  float gy = 0.5*(yp-ym)*scale;

  vec3 v1 = normalize(vec3(1.0,0.0,gx));
  vec3 v2 = normalize(vec3(0.0,1.0,gy));

  return cross(v1,v2);
}

void main(void) {
    float d = texture2D(uHeightfield,vTextureCoord).x;
    vec3 n = computeNormal();
    vec3 s = shade(n,d);
    gl_FragColor = vec4(s,1.0);
}
</script>

<script id="spaceship-vs" type="x-shader/x-vertex">
// *** le vertex shader ***
attribute vec3 aVertexPosition; // la position du sommet
attribute vec2 aVertexCoord; // sa coordonnee de texture

uniform vec2 uPosition; // position du vaisseau
varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

void main(void) {
  // projection de la position
  gl_Position = vec4(aVertexPosition+vec3(uPosition,0.0), 1.0);

  // stockage de la coordonnee de texture
  vTextureCoord = aVertexCoord;
}
</script>
<script id="spaceship-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

varying vec2 vTextureCoord; // recuperation de la coord rasterisee

uniform float uTime; // temps actuel
uniform float uInvincible; // effet invincible
uniform sampler2D uTexture; // la texture en entree

void main(void) {
    gl_FragColor = texture2D(uTexture, vTextureCoord);
    vec3 color = vec3(gl_FragColor.x - (0.2 * uTime) + uInvincible, gl_FragColor.y - uTime, gl_FragColor.z - uTime);
    gl_FragColor = vec4(color, gl_FragColor.w);
}
</script>

<script id="missile-vs" type="x-shader/x-vertex">
// *** le vertex shader ***
attribute vec3 aVertexPosition; // la position du sommet
attribute vec2 aVertexCoord; // sa coordonnee de texture

uniform vec2 uPosition; // position du vaisseau
varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

void main(void) {
  // projection de la position
  gl_Position = vec4(aVertexPosition+vec3(uPosition,0.0), 1.0);

  // stockage de la coordonnee de texture
  vTextureCoord = aVertexCoord;
}
</script>
<script id="missile-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

varying vec2 vTextureCoord; // recuperation de la coord rasterisee

uniform sampler2D uTexture; // la texture en entree

void main(void) {
    gl_FragColor = texture2D(uTexture, vTextureCoord);
}
</script>

<script id="ennemi-vs" type="x-shader/x-vertex">
// *** le vertex shader ***
attribute vec3 aVertexPosition; // la position du sommet
attribute vec2 aVertexCoord; // sa coordonnee de texture

uniform vec2 uPosition; // position du vaisseau
varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

void main(void) {
  // projection de la position
  gl_Position = vec4(aVertexPosition+vec3(uPosition,0.0), 1.0);

  // stockage de la coordonnee de texture
  vTextureCoord = aVertexCoord;
}
</script>

<script id="ennemi-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

varying vec2 vTextureCoord; // recuperation de la coord rasterisee

uniform sampler2D uTexture; // la texture en entree

void main(void) {
    gl_FragColor = texture2D(uTexture, vTextureCoord);
}
</script>

<script id="weather-vs" type="x-shader/x-vertex">
// *** le vertex shader ***
attribute vec3 aVertexPosition; // la position du sommet
attribute vec2 aVertexCoord; // sa coordonnee de texture

uniform vec2 uPosition; // position du vaisseau

void main(void) {
  // projection de la position
  gl_Position = vec4(aVertexPosition+vec3(uPosition,0.0), 1.0);
}
</script>
<script id="weather-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

uniform float uTime; // temps actuel

void main(void) {
    gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
}
</script>

<script id="bonus-vs" type="x-shader/x-vertex">
// *** le vertex shader ***
attribute vec3 aVertexPosition; // la position du sommet
attribute vec2 aVertexCoord; // sa coordonnee de texture

uniform vec2 uPosition; // position du vaisseau
varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

void main(void) {
  // projection de la position
  gl_Position = vec4(aVertexPosition+vec3(uPosition,0.0), 1.0);

  // stockage de la coordonnee de texture
  vTextureCoord = aVertexCoord;
}
</script>

<script id="bonus-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

varying vec2 vTextureCoord; // recuperation de la coord rasterisee

uniform sampler2D uTexture; // la texture en entree
uniform int uType; // type du bonus

void main(void) {
    vec4 color;
    if (uType == 0) {
      color = vec4(0.0, 0.1, 1.0, 0.0);
    } else if (uType == 1) {
      color = vec4(0.1, 1.0, 0.1, 0.0);
    } else if (uType == 2) {
      color = vec4(1.0, 0.1, 0.1, 0.0);
    } else if (uType == 3) {
      color = vec4(1.0, 0.9, 0.4, 0.0);
    }
    gl_FragColor = texture2D(uTexture, vTextureCoord) + color;
}



</script>

<script type="text/javascript">

    var fbo; // le FBO utilis� pour rendre la texture de hauteur
    var heightfield; // l'objet heightfield, sa g�om�trie, son shader
    var background; // l'objet background, sa g�om�trie, son shader
    var spaceship; // l'objet spaceship, sa g�om�trie, son shader
    var weather;  // l'objet weather, sa g�om�trie, son shader
    var ennemis = []; // Les ennemis
    var killed = 0; // Les ennemis tués par le joueur
    var lostMissiles = []; // Les missiles dont le propriétaires n'existe plus (pour continuer de les afficher)
    var pause = false; // jeu en pause
    var gameOver = false; // le joueur est mort
    var bonus = []; // les bonus

    function drawScene() {
        // initialisation du viewport
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.enable(gl.BLEND);
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
        // efface les buffers de couleur et de profondeur
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        // active le FBO (a partie de la, on dessine dans la texture associ�e)
        gl.bindFramebuffer(gl.FRAMEBUFFER,fbo.id());

        // dessin du heightfield
        gl.useProgram(heightfield.shader());
        heightfield.sendUniformVariables();
        heightfield.draw();

        // desactivation du FBO (on dessine sur l'ecran maintenant)
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);

        // dessin du background (utilise la texture dessin�e pr�c�demment)
        gl.useProgram(background.shader());
        background.sendUniformVariables();
        background.draw();

        // dessin des missiles du joueur
        for (var i = 0, length = spaceship.missiles.length ; i < length ; i++) {
            gl.useProgram(spaceship.missiles[i].shader());
            spaceship.missiles[i].sendUniformVariables();
            spaceship.missiles[i].draw();
        }

        // dessin du vaisseau
        gl.useProgram(spaceship.shader());
        spaceship.sendUniformVariables();
        spaceship.draw();

        // dessin des missiles de l'ennemi
        for (var i = 0, length = ennemis.length ; i < length ; i++) {
            for (var i2 = 0, length2 = ennemis[i].missiles.length ; i2 < length2 ; i2++) {
                gl.useProgram(ennemis[i].missiles[i2].shader());
                ennemis[i].missiles[i2].sendUniformVariables();
                ennemis[i].missiles[i2].draw();
            }
        }

        // dessin d'un enemie
        for (var i = 0, length = ennemis.length ; i < length ; i++) {
            gl.useProgram(ennemis[i].shader());
            ennemis[i].sendUniformVariables();
            ennemis[i].draw();
        }

        // dessin des missiles perdus
        for (var i = 0, length = lostMissiles.length ; i < length ; i++) {
            gl.useProgram(lostMissiles[i].shader());
            lostMissiles[i].sendUniformVariables();
            lostMissiles[i].draw();
        }

        // dessin des bonus
        for (var i = 0, length = bonus.length ; i < length ; i++) {
            gl.useProgram(bonus[i].shader());
            bonus[i].sendUniformVariables();
            bonus[i].draw();
        }

        gl.useProgram(weather.shader());
        weather.sendUniformVariables();
        weather.draw();
    }

    // une bonne mani�re de gerer les evenements claviers
    // permet d'avoir plusieurs touches appuy�es simultan�men
    var currentlyPressedKeys = {};

    function handleKeyDown(event) {
        currentlyPressedKeys[event.keyCode] = true;
        if (event.keyCode === 80) {
            pauseFunction();
        }
    }


    function handleKeyUp(event) {
        currentlyPressedKeys[event.keyCode] = false;
    }

    function handleKeys() {

    }

    function mouseMove(event) {
        // controle de la position du vaisseau en fonction de la souris
        // la position est remapp�e entre -1 et 1 pour cela
        var newx = 2.0*(event.clientX/gl.viewportWidth)-1.0;
        var newy = -(2.0*(event.clientY/gl.viewportHeight)-1.0);
        spaceship.setPosition(newx, newy);
    }

    function tbMouseDown(event) {
        spaceship.beginFire();
    }

    function tbMouseUp(event) {
        spaceship.stopFire();
    }




    // animation
    var lastTime = 0;
    function animate() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
            // chaque objet est susceptible de s'animer
            var elapsed = timeNow - lastTime;
            heightfield.setParameters(elapsed);
            spaceship.setParameters(elapsed);
            background.setParameters(elapsed);
            weather.setParameters(elapsed);

            // annimation des missiles du joueur
            for (var i = 0, length = spaceship.missiles.length ; i < length ; i++) {
                spaceship.missiles[i].setParameters(elapsed);
            };

            // annimation des ennemis et de leurs missiles
            for (var i = 0, length = ennemis.length ; i < length ; i++) {
                ennemis[i].setParameters(elapsed);

                // annimation des missiles des ennemis
                for (var i2 = 0, length2 = ennemis[i].missiles.length ; i2 < length2 ; i2++) {
                    ennemis[i].missiles[i2].setParameters(elapsed);
                }
            }

            // annimation des missiles perdus
            for (var i = 0, length = lostMissiles.length ; i < length ; i++) {
                lostMissiles[i].setParameters(elapsed);
            }

            // annimation des bonus
            for (var i = 0, length = bonus.length ; i < length ; i++) {
                bonus[i].setParameters(elapsed);
            }
        }
        lastTime = timeNow;
    }

    // Supprime les éléments hors écran
    function outOfMap() {
        // Pour les missiles du joueur
        for (var i = 0 ; i < spaceship.missiles.length ; i++) {
            if (spaceship.missiles[i].position[1] > 1 + spaceship.missiles[i].height/2){
                spaceship.removeMissile(i);
                i--;
            }
        }

        // Pour les ennemis et leurs missiles
        for (var i = 0 ; i < ennemis.length ; i++) {
            for (var i2 = 0 ; i2 < ennemis[i].missiles.length ; i2++) {
                let position = ennemis[i].missiles[i2].position;
                let height = ennemis[i].missiles[i2].height;
                let width = ennemis[i].missiles[i2].width;
                if (position[0] > 1 + width/2 || position[0] < -1 - width/2
                    || position[1] > 1 + height/2 || position[1] < -1 - height/2){
                    ennemis[i].removeMissile(i2);
                    i2--;
                }
            }

            if (ennemis[i].position[1] < -1 - ennemis[i].height/2){
                Array.prototype.push.apply(lostMissiles, ennemis[i].missiles);
                ennemis.splice(i, 1);
                i--;
            }
        }

        // Pour les missiles perdus
        for (var i = 0 ; i < lostMissiles.length ; i++) {
            let position = lostMissiles[i].position;
            let height = lostMissiles[i].height;
            let width = lostMissiles[i].width;
            if (position[0] > 1 + width/2 || position[0] < -1 - width/2
                || position[1] > 1 + height/2 || position[1] < -1 - height/2){
                lostMissiles.splice(i, 1);
                i--;
            }
        }
    }

    // Tire les missiles
    function fireMissile() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
            var elapsed = timeNow - lastTime;

            spaceship.fireMissile(elapsed);

            for (var i = 0, length = ennemis.length ; i < length ; i++) {
                ennemis[i].fireMissile(elapsed, spaceship.position);
            }
        }
    }

    var time = 0;
    var spawntime = 200;

    // Fonction qui va generer des ennemis aléatoire
    function generateEnnemi(){

        time = time+1;

        if(time == spawntime){
            time = 0;

            // Génération aléatoir du type d'ennemi
            let en = null;
            let type = Math.round((Math.random() * 2) + 1);
            if (type === 1){
                en = new Ennemi(1, 0.6, 1500);
            }else if (type === 2){
                en = new Ennemi(2, 1, 1000);
            }else{
                en = new Ennemi(3, 0.8, 1000);
            }

            var x = Math.random() * (+1 - -1) + -1;
            var y =  Math.random() * (+1 - 0.5) + 1.25;
            en.initX = x;
            en.setPosition(x,y);
            this.ennemis.push(en);

            spawntime -= Math.round(spawntime/50);
            console.log(spawntime);
        }

    }

    function collide() {
      // collision des ennemis
      for (var i = 0 ; i < this.ennemis.length ; i++) {
        var ennemi= this.ennemis[i];
        if (rectCollide(ennemi, this.spaceship)) {
          this.spaceship.takeDamage(20);
          killEnnemi(ennemi);
          i--;
        } else {
          // collision des missiles ennemis
          for (var i2 = 0; i2 < ennemi.missiles.length ; i2++) {
            var missile = ennemi.missiles[i2];
            if (rectCollide(missile, this.spaceship)) {
              this.spaceship.takeDamage(30);
              ennemi.removeMissile(i2);
              i2--;
            }
          }

          for (var i2 = 0 ; i2 < this.spaceship.missiles.length ; i2++) {
            var missile = this.spaceship.missiles[i2];
            if (rectCollide(missile, ennemi)) {
              killEnnemi(ennemi);
              killed++;
              if (getRandomInt(6) == 0) {
                this.bonus.push(new Bonus(ennemi.position[0], ennemi.position[1], getRandomInt(4)))
              }
              this.spaceship.score += 500;
              this.spaceship.removeMissile(i2);
              i--;
              i2--;
            }
          }
        }

      }

      // collision des missiles perdus
      for (var i = 0; i < lostMissiles.length ; i++) {
        var missile = lostMissiles[i];
        if (rectCollide(missile, this.spaceship)) {
          this.spaceship.takeDamage(30);
          lostMissiles.splice(i, 1);
          i--;
        }
      }

      // collision des bonus perdus
      for (var i = 0; i < bonus.length ; i++) {
        if (rectCollide(bonus[i], this.spaceship)) {
          this.spaceship.bonus(bonus[i]);
          bonus.splice(i, 1);
          i--;
        }
      }

        // test si le joueur est mort
        if (spaceship.hp <= 0) {
            gameOverFunction();
        }
    }

    function rectCollide(rect1, rect2) {
      if (rect1.position[0] - rect1.width/2 < rect2.position[0] + rect2.width/2 &&
          rect1.position[0] + rect1.width/2 > rect2.position[0] - rect2.width/2 &&
          rect1.position[1] - rect1.height/2 < rect2.position[1] + rect2.height/2 &&
          rect1.height/2 + rect1.position[1] > rect2.position[1] - rect2.height/2) {
          return true;
      }
      return false;
    }

    function killEnnemi(ennemi) {
      Array.prototype.push.apply(lostMissiles, ennemi.missiles);

      // todo avant de la tuer faire un sprit de destruction
      ennemi.destruction();

      this.ennemis.splice(this.ennemis.indexOf(ennemi), 1);

    }

    function updateInterface() {
      $('#killed').html(this.killed);
      $('#hp').html(this.spaceship.hp);
      $('#score').html(this.spaceship.score);
    }

    function score() {
      this.score++;
    }

    function getRandomInt(max) {
      return Math.floor(Math.random() * Math.floor(max));
    }

    function pauseFunction() {
        if (!gameOver) {
            if (pause) {
                pause = false;
                lastTime = new Date().getTime();
                tick();
                document.getElementById("pause").style.display = 'none';
            } else {
                pause = true;
                document.getElementById("pause").style.display = 'block';
            }
        }

    }

    function gameOverFunction() {
        gameOver = true;
        document.getElementById("gameover").style.display = 'block';
    }

    function tick() {
        handleKeys();

        if (!pause && !gameOver) {
            this.spaceship.score += 1;
            requestAnimFrame(tick);
            outOfMap();
            fireMissile();
            generateEnnemi();
            collide();
            drawScene();
            animate();
            updateInterface();
        }
    }


    function webGLStart() {
        // initialisation de la musique
        myAudio = new Audio('Bowie-starman.mp3');
        // musique jouée en boucle
        myAudio.addEventListener('ended', function() {
            this.currentTime = 0;
            this.play();
        }, false);
        myAudio.play();

        // initialisation du canvas et des objets OpenGL
        var canvas = document.getElementById("SpaceShip");
        initGL(canvas);

        // init FBO
        fbo = new FBO(canvas.width,canvas.height,1,false);

        // init de tous les shaders
        initHeightfieldShader();
        initBackgroundShader();
        initSpaceshipShader();
        initMissileShader();
        initweatherShader();
        initEnnemiShader(); //ph
        initBonusShader();

        // init des textures
        initSpaceshipTexture();
        initMissileTexture();
        initEnnemiTexture(); //ph
        initBonusTexture();

        // init de tous les objets
        heightfield = new Heightfield();
        background = new Background(fbo.texture(0));
        spaceship = new Spaceship();
        weather = new Weather();

        // la couleur de fond sera noire
        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        // active le teste de profondeur
        gl.enable(gl.DEPTH_TEST);

        /* Mouse and keyboard interaction functions */
        canvas.addEventListener('mousedown', tbMouseDown, true);
        canvas.addEventListener('mousemove', mouseMove, true);
        canvas.addEventListener('mouseup', tbMouseUp, true);

        document.onkeydown = handleKeyDown;
        document.onkeyup = handleKeyUp;

        // dessine la scene
        tick();
    }


</script>


</head>


<body onload="webGLStart();">
  <canvas id="SpaceShip" style="border: none; cursor: none;" width="800" height="800"></canvas>

  <div class="menu">

    <div class="logo">
      <img src="img/logo.png" alt="logo" id="logo">
      <hr style="margin-top: -5px;">
    </div>

    <div class="stat">
      <div class="pv">
        <p>Life Point</p>
        <p id="hp"></p>
      </div>
      <hr style="width: 70%; margin: auto;">
      <div class="kill">
        <p>Ennemi Killed</p>
        <p id="killed"></p>
      </div>
      <hr style="width: 70%; margin: auto;">
      <div class="score">
        <p>Score</p>
        <p id="score"></p>
      </div>
      <hr style="">
      <div class="Musique">
        <p>Musique</p>
        <p>David Bowie - Starman</p>
      </div>
    </div>

    <div class="story">
    </div>

  </div>

    <div id="pause" style="font-size: 50px; margin: 8px; position: absolute; width: 800px; height: 800px; left: 0px; top: 0px; display: none;">
        <p style="margin-top: 40%">Pause</p>
    </div>

    <div id="gameover" style="margin: 8px; position: absolute; width: 800px; height: 800px; left: 0px; top: 0px; display: none;">
        <p style="font-size: 50px;  margin-top: 40%">Game Over</p>
        <p style="font-size: 30px;" onclick="/*fonction rejouer*/window.location.reload()">Rejouer</p>
    </div>
</body>
</html>
